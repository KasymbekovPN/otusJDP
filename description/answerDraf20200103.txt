// Вопрос

1) synchroniser-клиент - это часть MessageSystem (в терминах ДЗ-16)?
2) userMonitoring - это тоже часть MS ?
3) Если это разные модули, то как они связаны с MS? 
4) Нарисуйте картинку взаимодействия, кажется, тут клубок получается.

и я пока не понимаю как вы собираетесь делать такое:
В работе подумате как сделать так, чтобы добавление нового типа клиента MS или сообщения не занимало много времени.
Придумать и сделать такой механизм, чтобы добавление нового клиента или типа сообщения не требовало бы кодирования, а делалось бы через конфиги - уже нормальный объем для работы.
Т.е. новый модуль, конечно, надо закодить, но его подключение к системе должно выглядеть как включение, например, плагина, т.е. без изменения кода основной системы.

Я вам предлагаю на этом сконцентрироваться.
А уже после этого вы придумаете как реализовать блокировки, ограничение прав, кеширование и т.д. Ведь это все будет, по сути, добавление новых сообщений и модулей.

// Ответ

1...4)

synchoniser-клиент и userMonitoring-клиент - не часть messageSystem-клиента, а отдельные клиенты, всё общение между клиентами происходит через messageSystem-клиент.

Схема в приложении.

1. Типы сообщений 
  1.1 Типы сообщений и их валидная структура (нужная для проверки, которая происходит после приёма сообщения и перед передачей сообщение в обработчик) указаны в файле "standardMessages.json" 

2. Обработка, принятого messageSystem-клиентом, сообщения.
  2.1 Все типы сообщений можно разделить на 3 группы, каждой группе соответствует свой обработчик
    2.1.1 Сообщение для регистрации - шлется какие-либо клиентом для регисрации его в messageSystem-клиенте
    2.1.2 Обычные сообщения - шлется одним клиентом (через MessageSystem-клиент) в другой клиент с целью запросить/передать данные
    2.1.3 Невалидное сообщение
  2.2 Информация о том к какой группе относится конкретное сообщение будет находится в файле "messageGroups.json"
  2.3 Файл будет иметь примерно следующий вид:
{
	"registrationMessage" : "I_AM_REQUEST",
	"commonMessages" : ["req0", "req1", ...]
}
  2.4 Регистрационное сообщение может быть только одно
  2.5 Если тип сообщения не указан в "messageGroups.json", то оно относится к группе невалидных сообщений.
  2.6 Исходя из содержимого "messageGroups.json" в SocketHandlerConfig-файле к инстансу SocketHandler добавляются обработчики сообщений:

@Configuration
public class SocketHandlerConfig {

	...

    @Bean
    public SocketHandler socketHandler(){

    	// ...

    	String registrationMessage;
    	String[] commonMessages;

    	/*
    		Получаем registrationMessage, commonMessages
    	*/

        socketHandler.addHandler(registrationMessage, new IAmRequestSIH(...));

        for (String msg : commonMessages){
        	socketHandler.addHandler(msg, new CommonMessagesSIH(...));
        }

        socketHandler.addHandler("WRONG_TYPE", new WrongTypeSIH());
    
    	// ...
    }
}

    2.6.1 IAmRequestSIH - обработчик сообщения для регистрации внешних клиентов
    2.6.2 CommonMessagesSIH - обработчик обычного сообщения
    2.6.4 WrongTypeSIH - обработчик невалидного сообщения

3. Клиенты системы сообщений
  3.1 Клиент системы сообщений - инстанс класса MsClientImpl, которые из очереди получает сообщение и шлёт его внешнему, относительно messageSystem-клиента, клиенту-получателю.
  3.2 Описание клиентов, которые можно зарегистрировать в messageSystem-клиенте обозначены в конфигурационном файле ("clientConfig.json"), представленном ниже:
{
	"DATABASE" : {
		"solus" : false,
		"validMessages" : ["msg0", "msg1", ...]
	},
	"FRONTEND" : {
		"solus" : false,
		"validMessages" : ["msg2", "msg3", ...]
	},
	"USER_MONITORING" : {
		"solus" : true,
		"validMessages" : ["msg4", "msg5", ...]	
	},
	"SYNCHRONIZER" : {
		"solus" : true,
		"validMessages" : ["msg6", "msg7", ...]
	}
}
    3.2.1 solus - флаг показывает должен ли клиент (внешний относительно messageSystem-клиента) и соответствующий ему клиент системы сообщений внутри messageSystem-клиента существовать в единственном экземпляре. Например, userMonitoring-клиент и synchroniser-клинт должны существовать в одном экземпляре, а frontend-клиентов может быть несколько.
    3.2.2 validMessages - перечень типов сообщений валидных для данного типа клиента системы сообщений.
  3.3 Создание клиента системы сообщений происходит при обработке сообщения, служащего для регистрации внешнего клиента. Из сообщения беруться host, port, entity, на их основе производится идентификатор клиента системы сообщений.
    3.3.1 Entity - сущность клиента: DATABASE, FRONTEND и т.д. 
    3.3.2 Валидные сущности обозначены в "clientConfig.json"
    3.3.3 Если клиент системы сообщений ещё не существует и сущность клиента валидна, то клиент системы сообщений создается, во внешний клиент шлется ответ об успешном создании для него клиента системы сообщений
    3.3.4 Иначе - шлется ответ : почему клиент системы сообщений для данного внешнего клиента не был создан.
  3.4 Каждый клиент системы сообщений (внутренний отностительно messageSystem-клиента) выполняет две функции:
    3.4.1 Через определенный клиент системы сообщений сообщение, принятое messageSystem-клиентом от внешнего клиента кладется в очередь.
    3.4.2 Сообщение полученное из очереди, передается соответствующему клиенту системы сообщений.
      3.4.2.1 Если тип сообщение валиден (т.е. указан в поле "validMessages" для соотв. клиента) для данного клиента системы сообщений, то сообщение отправляется в внешний целевой клиент.
      3.4.2.2 Иначе - клиент системы сообщений формирует сообщение с типом "WRONG_TYPE", указывая целью клиент-источник принятого сообщения и кладет его в очередь сообщений.
