// Вопрос

1)
Как будет реализовано это требование?
В работе подумате как сделать так, чтобы добавление нового типа клиента MS или сообщения не занимало много времени.
Придумать и сделать такой механизм, чтобы добавление нового клиента или типа сообщения не требовало бы кодирования, а делалось бы через конфиги - уже нормальный объем для работы.
Т.е. новый модуль, конечно, надо закодить, но его подключение к системе должно выглядеть как включение, например, плагина, т.е. без изменения кода основной системы.
Сейчас вижу описание сообщений в json файлах, но не понимаю как это будет с java-кодом связано.
Допустим, добавляется REST-клиент для получения данных из таблицы tUsers базы данных.
Что надо будет сделать?


2)
2.6 Исходя из содержимого "messageGroups.json" в SocketHandlerConfig-файле к инстансу SocketHandler добавляются обработчики сообщений:
Как это будет добавлено?
Надо будет изменить исходный код приложения?


Давайте сначала эту часть завершим, и только потом перейдем "под черту".
-----------------------------------------------------

3)
3.2.1 solus - флаг показывает должен ли клиент (внешний относительно messageSystem-клиента) и соответствующий ему клиент системы сообщений внутри messageSystem-клиента существовать в единственном экземпляре.
Требование единственного экземпляра очень странное, это сильно снижает ценность всей распределенной системы.
Все компоненты должны уметь реплицироваться. 
По крайней мере, на уровне архитектуры не должно быть таких ограничений.

4) на схеме вижу отдельные блоки "MSC - Message System Client" - это что такое?
Message System - это часть, отмеченная прямоугольником?

// Ответ

Допустим нужно добавить REST-клиент и два типа сообщения "restRequest" и "restResponse". 
 "restRequest" - сообщение данного типа запрашивает у database-клиента какие-либо данные
 "restResponse" - с сообщением данного типа REST-клиент получает какие-либо данные от database-клиента

Для этого нужно сделать:
1.1 Написать REST-клиент
1.2 Модифицировать, если существует или написать с нуля database-клиент
1.3 Добавить описания сообщений restRequest и restResponse в "standardMessages.json"
1.4 Модифицировать файл "clientConfig.json" (файл содержит информацию нужную для создания клиентов системы сообщений - внутренних элементов messageSystem-клиента), а именно добавить объект, характеризующий rest-клиент ("REST"), добавить в "DATABASE"
 ещё одно валидное для него сообщение, а именно "restRequest"

Было :
{
	"DATABASE" : {
		"solus" : false,
		"validMessages" : ["msg0", "msg1", ...]
	},
	"FRONTEND" : {
		"solus" : false,
		"validMessages" : ["msg2", "msg3", ...]
	},
	"USER_MONITORING" : {
		"solus" : true,
		"validMessages" : ["msg4", "msg5", ...]	
	},
	"SYNCHRONIZER" : {
		"solus" : true,
		"validMessages" : ["msg6", "msg7", ...]
	}
}

Стало :
{
	"DATABASE" : {
		"solus" : false,
		"validMessages" : ["msg0", "msg1", ..., "restRequest"]
	},
	"FRONTEND" : {
		"solus" : false,
		"validMessages" : ["msg2", "msg3", ...]
	},
	"USER_MONITORING" : {
		"solus" : true,
		"validMessages" : ["msg4", "msg5", ...]	
	},
	"SYNCHRONIZER" : {
		"solus" : true,
		"validMessages" : ["msg6", "msg7", ...]
	},
	"REST" : {
		"solus" : false,
		"validMessages" : ["restResponse"]
	}
}

1.5. Модифицировать файл "messageGroups.json", а именно указать в нем два новых типа сообщений

Было:
{
	"registrationMessage" : "I_AM_REQUEST",
	"commonMessages" : ["msg0", "msg1", ...]
}

Стало:
{
	"registrationMessage" : "I_AM_REQUEST",
	"commonMessages" : ["msg0", "msg1", ..., "restRequest", "restResponse"]
}

1.6. MessageSystem-клиент изменять не требуется.
  1.6.1 При помощи информации, содержащийся в "messageGroups.json", messageSystem-клиент будет понимать
    1.6.1.1 Какое сообщение служит для регистрации (registrationMessage)
    1.6.1.2 Какие типы сообщения валидны (commonMessages)
    1.6.1.3 Все прочие типы сообщений невалидны
  1.6.2 При помощи информации, содержащийся в "clientConfig.json", messageSystem-клиент будет понимать, как настроить вновь созданный клиент системы сообщений, исходя из сущности внешнего клиента (rest, database, etc), которому он будет соответствовать.