// Вопрос

2)
четырьмя флагами-состояниями (возможность добавления, удаления, редактирования и просмотра узлов).
Т.е. пользователь сможет редактировать, но не сможет читать?

Если под уровнем UI подразумевается frontend-клиент, то в нем будет находиться хэш данных пользователей и групп
Как кеш будет синхронизироваться на всех frontend-клиентах?

3)
Информация о подписках будет храниться во frontend-клиенте(-ах).
Как это будет реализовано? на всех frontend-клиентах будет информация обо всех активных Web-браузерах и везде будет отсчитываться таймер активности? Как эта информация будет сихронизироваться?
Как будет решаться у кого эталонная копия? Когда запустится новый frontend-клиент, где он возьмет актуальную информацию? Какое примерное значение будет у "таймаута активности" ?

Знать будут пользователи выделившие узел для выполнения с ним каких-либо действий.
Как технически они это будут узнавать?

4) По поводу названия - нужно ли его где-нибудь регистрировать?
У вас должна быть кнопка типа "Предложить тему".
Сейчас там должно быть написано "Обсуждение дипломного проекта"

// Ответ

2) 

Просмотр подразумевает чтение.

Для синхронизации хэшей во frontend-клиентах будет использоваться syncroniser-клиент.
 * frontend-клиент от UI получает запрос связанный с изменением данных
 * frontend-клиент формирует и отправляет сообщение в database-клиент
 * database-клиент принимает сообщение, производит нужные действия, формирует и отправляет ответ во frontend-клиент
 * frontend-клиент понимает, что данный тип ответа связан с изменением даных, шлет сообщение не в UI, а в synchroniser-клиент
 * syncroniser-клиент кладет полученное сообщение во внутренную очередь, сообщение взятое из начала очереди рассылается всем frontend-клиентам, данное сообщение помимо прочего содержит в себе url frontend-клиента, инициировавшего изменения.
 * frontend-клиент, инициировавший изменения, шлет ответ в UI

3) 

Для хранения информации о подписках и реализации функционала "таймаут активности" будет использоваться userMonitoring-клиент
* Информацию о подписках все frontend-клиенты будут брать из него.
* Значение "таймаута активности" булет задавать userMonitoring-клиенту при запуске через аргументы командной строки
* userMonitoring-клиент будет содержать мапу : идетификатор узла на инстанс объекта
* инстанс объекта содержит информацию о:
 * редактирующем 
 * просматривающих

Как пользователь узнает, что заметку редактируют:
 * При выделении узла UI отсылает во frontend-клиент запрос
 * frontend-клиент принимает запрос, формирует сообщение для userMonitoring-клиента и шлёт в него
 * userMonitonig-клиент смотрит кто и каким образом подписан на данный узел
 * userMonitonig-клиент отправляет ответ во frontend-клиент
 * frontend-клиент формирует и отправляет ответ в UI
 * Если узел кем-либо редактируется, то над ним появляется помента "Редактирует : userName"
 * Если узел кем-либо просматривается, то над ним появляется помента "Просматривается"

Подписка на редактирование:
 * При нажатии пункта "Редактировать" в контекстном меню узла во frontend-клиент шлётся запрос
 * frontend-клиент принимает запрос, формирует сообщение для userMonitoring-клиента и шлёт в него
 * userMonitonig-клиент смотрит кто и каким образом подписан на данный узел.
  * Если никто не редактирует, то редактирующим становится данный пользователь.
  * таймер запускается.
 * userMonitonig-клиент отправляет ответ во frontend-клиент
 * frontend-клиент формирует и отправляет ответ в UI
 * UI принимает ответ
  * Если узел уже кем-либо редактируется, то пользователю сообщается об этом в диалоговом окне
  * Иначе открывается окно редактирования.
 * При изменении содержимого окна редактирования UI шлет сообщение, сбрасывающее "таймер активности"
 * При нажатии кнопки [X] UI шлёт сообщение о том, что данный пользователь больше не редактирующий
 * При нажатии кнопки СОХРАНИТЬ UI шлёт сообщения : сообщение изменяющее содержимое заменки, сообщение о том, что данный пользователь больше не редактитующий.

Подписка на просморт:
 * При нажатии пункта "Просмотр" в контекстном меню узла во frontend-клиент шлётся запрос
 * frontend-клиент принимает запрос, формирует сообщение для userMonitoring-клиента и шлёт в него
 * пользователь добавляется в инстанс обхекта соответствующего узлу как просматривающий
 * userMonitoring-клиента шлет ответ во frontend-клиент 
 * frontend-клиент шлёт ответ в UI
 * открывается окно просмотра

Как userMonitoring-клиент будет получать информацию о узлах:

 * В каждом клиенте, а именно в инстансе класса, работающем с сокетами, будет возможность подписаться на ответ предназначенный другому.
 * Например:
  * userMonitoring-клиент шлет в messageSystem-клиент запроса, о том что от подписывается на ответ, который messageSystem шлет новому клиенту при его регистрации, 
  * когда messageSystem шлет ответ о регистрации нового клиента, ответ шлется не только в новый клиент, но подписчикам, в данном случае - userMonitoring-клиенту.
 * Или, если userMonitoring подписывается в database-клиенте на ответ при добавлении/удалении узла, то получает данную информацию.

 * после запуска и регистрации userMonitoring-клиента, он запрашивает url-ы database-клиентов.
 * у database-клиента userMonitoring запрашивает нужную ему информацию о узлах
 * так же подписывается у всех database-клиентов на ответ о добавление/удалении узлов.
 * тоже самое делается при появлении нового database-клиента.
